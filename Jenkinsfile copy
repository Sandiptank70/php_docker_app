pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/vireshsolanki/reactsocialnetworkpipelinetest.git'
            }
        }
        stage('Debug Workspace') {
            steps {
                sh 'ls -la'
            }
        }
        stage('Install Dependencies for Server') {
            steps {
                dir('server') {
                    sh 'npm install'
                }
            }
        }
        stage('Install Dependencies for Client') {
            steps {
                dir('client') {
                    sh 'npm install'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=uptime \
                        -Dsonar.projectKey=uptime
                    '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Pipeline aborted due to failing Quality Gate: ${qualityGate.status}"
                    }
                }
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.json"
            }
        }
        stage('Debug Docker Access') {
            steps {
                sh '''
                    whoami
                    groups
                    docker ps
                '''
            }
        }
        stage('Build and Push Images with Docker Compose') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            set -e
                            # Login to Docker Hub
                            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD https://index.docker.io/v1/
                            
                            # Build and push Docker images
                            docker compose build
                            docker compose push
                        '''
                    }
                }
            }
        }
        stage('TRIVY Image Scan') { // Scan the Docker images
            steps {
                sh '''
                    trivy image vireshsolanki/webapp:latest > server_trivy.json
                    trivy image vireshsolanki/myimages:latest > client_trivy.json
                '''
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                sh '''
                    docker compose down 
                    docker compose up -d
                '''
            }
        }
    }
    post {
        always {
            echo 'Cleaning up workspace and gathering logs...'
            cleanWs()
            archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
            echo 'Pipeline execution complete.'
        }
        success {
            echo 'Pipeline completed successfully!'
            emailext subject: 'Pipeline Succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}',
                     body: 'Good news! The pipeline has completed successfully. Please verify the build at ${env.BUILD_URL}.',
                     to: 'team@example.com'
        }
        failure {
            echo 'Pipeline failed. Sending notifications...'
            emailext subject: 'Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}',
                     body: 'Unfortunately, the pipeline has failed. Check the logs at ${env.BUILD_URL} for details.',
                     to: 'team@example.com'
        }
        unstable {
            echo 'Pipeline marked as unstable. Check for warnings or quality gate issues.'
            emailext subject: 'Pipeline Unstable: ${env.JOB_NAME} #${env.BUILD_NUMBER}',
                     body: 'The pipeline was marked as unstable. Please investigate the issues. Logs are available at ${env.BUILD_URL}.',
                     to: 'team@example.com'
        }
        changed {
            echo 'Pipeline result has changed since the last run.'
            emailext subject: 'Pipeline Status Changed: ${env.JOB_NAME} #${env.BUILD_NUMBER}',
                     body: 'The pipeline status has changed. Please review the details at ${env.BUILD_URL}.',
                     to: 'team@example.com'
        }
    }
}
